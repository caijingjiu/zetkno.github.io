<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zetkno&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-06T14:14:12.398Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jiuming Han</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git快速入门之一：创建本地仓库并同步到远程</title>
    <link href="http://yoursite.com/2017/06/06/git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B9%8B%E4%B8%80%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%B9%B6%E5%90%8C%E6%AD%A5%E5%88%B0%E8%BF%9C%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/06/06/git快速入门之一：创建本地仓库并同步到远程/</id>
    <published>2017-06-06T14:12:29.326Z</published>
    <updated>2017-06-06T14:14:12.398Z</updated>
    
    <content type="html"><![CDATA[<p><div class="post-content" itemprop="articleBody"><br>            <p>git是非常强大的版本管理工具。接下来的时间里，我就和大家絮叨絮叨git的入门：如何在本地创建一个git仓库，并把自己的本地代码同步到远程。此教程是在mac上操作的，如果您的系统是Linux，那么操作方法相同；如果您的系统是windows，那么，只需要把git的bash窗口调出来，以后的过程也都与Linux相同。<br><br>一、首先，您需要安装git，此步就忽略了，自行安装即可。</p></div></p>
<p>二、假设你目前还没有创建一个工作目录,那么，先创建一个目录吧，就叫StudyGit。</p><br><p>三、现在的StudyGit目录还只是一个本地目录，和git没有任何关联,那么，我们怎么样才能把这个目录和git关联起来呢？只需要进入StudyGit目录，运行如下命令：</p><br><a id="more"></a><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git init<br>Initialized empty Git repository in /Users/yanyaozhen/Coding/Practice/StudyGit/.git/<br></code></pre><br><p>提示已经说明我们初始化了一个空的本地git仓库。如果你查看StudyGit下的所有文件时，会发现一个.git 的隐藏文件，这个文件非常重要，版本的控制就靠它了。同时，如果你要部署应用程序到生产环境时，切记不要把该目录部署到服务器，因为这可是黑客的最爱啊！</p><br><p>四、接下来我们来看一个基本可以说是用的最频繁的一个命令：</p><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git status<br>On branch master<br><br>Initial commit<br><br>nothing to commit (create/copy files and use “git add” to track)<br></code></pre><br><p>没错，就是”git status”。这个命令用于查看当前git的状态，比如，上面的例子中，我们刚创建了一个空的git仓库，那么运行该指令时，git会提示我们，当前没有任何东西要提交，同时提示我们，可以创建或者复制文件后使用“git add”命令来跟踪文件的变化。</p><br><p>五、现在让我们来创建一个文件吧。我们创建一个叫“a.txt”的文本文件，并且内容如下：</p><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ cat a.txt<br>aaa<br></code></pre><br><p>这个时候，让我们再来运行下git status吧。运行如下：</p><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git status<br>On branch master<br><br>Initial commit<br><br>Untracked files:<br>  (use “git add &lt;file&gt;…” to include in what will be committed)<br><br>    a.txt<br><br>nothing added to commit but untracked files present (use “git add” to track)<br></code></pre><br><p>这时会提示我们有一个未追踪的文件，叫a.txt。我们要把这个文件加入到版本控制中，于是，我们运行如下命令：</p><br><pre><code>git add a.txt<br></code></pre><br><p>这个命令表示把我们指定的a.txt加入到git控制之下。add命令可以没有参数(在windows下可以没有参数，在mac下需要指定当前目录即“.”)，如果没有参数，则表示把目录下的所有文件都加入到git仓库中。这个时候，我们再运行下“git status”：</p><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git status<br>On branch master<br><br>Initial commit<br><br>Changes to be committed:<br>  (use “git rm –cached &lt;file&gt;…” to unstage)<br><br>    new file:   a.txt<br></code></pre><br><p>提示我们有改变需要被提交。这个时候，a.txt这个文件就存在于所谓的“暂存区”中，暂存区中的文件可以被真正提交到git仓库。有同学可能说，如果我不想提交这个文件了，那怎么把刚才的文件从暂存区移除呢？其实答案就在刚才的提示中：<br><br>use “git rm –cached <file>…” to unstage。<br><br>那么，我们运行下这个命令：</file></p><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git rm –cached a.txt<br>rm ‘a.txt’<br></code></pre><br><p>再运行git status时就可以发现，又回到文件没有被提交时的状态了。</p><br><p>六、当我们的文件已经通过“git add”加入到暂存区后，就可以把文件真正提交到git仓库了。如下：</p><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git commit -m “提交a.txt”<br><br><em>*</em> Please tell me who you are.<br><br>Run<br><br>  git config –global user.email “you@example.com”<br>  git config –global user.name “Your Name”<br><br>to set your account’s default identity.<br>Omit –global to set the identity only in this repository.<br><br>fatal: unable to auto-detect email address (got ‘yanyaozhen@macbookpro.(none)’)<br></code></pre><br><p>阿欧，报错了，查看给出的错误原因，发现是因为没有设置email和用户名，所以git不让我提交。git为什么要强制要求设置了这两个配置才能提交呢？因为git必须得知道是谁提交的，如果连谁提交的都不知道，那还怎么做版本管理啊，是不。所以我们根据提示设置下：</p><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git config –global user.email “youremail@example.com”<br>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git config –global user.name “yourusername”<br>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$<br></code></pre><br><p>好了，我们再提交下：</p><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git commit -m “提交a.txt”<br>[master (root-commit) dab07d0] 提交a.txt<br> 1 file changed, 1 insertion(+)<br> create mode 100644 a.txt<br></code></pre><br><p>发现已经可以提交成功了，提示一个文件被修改（就是我们的a.txt），一行被插入（就是我们唯一的一行“aaa”）。<br><br>我们再运行下git status：</p><br><pre><code>yanyaozhen@macbookpro:~/Coding/Practice/StudyGit$ git status<br>On branch master<br>nothing to commit, working directory clean<br></code></pre><br><p>提示我们当前没有东西要提交，当前工作目录是干净的，因为我们都提交到git了。<br><br>好了，到这步后，git就可以完全跟踪已经被提交的文件了，以后，这个文件的任何修改，它都可以记录下来。比如某个人对项目私自修改了一些东西，项目管理者根据git的版本记录是一定可以找到是谁修改了哪些文件的。<br><br>现在我们就可以把文件提交到远程服务器了。</p><br><p>七、当我们要提交git仓库中的内容到远程服务器时，我们必须得先成为远程服务器受信任的用户才行（服务器当然不允许所有人都可以推送内容，那样就乱套了）。这个时候，我们需要先在本地生成一个公钥，然后把公钥放到远程服务器的账户列表中。生成公钥的命令如下：</p><br><pre><code>ssh-keygen -t rsa -C “youremail@example.com”<br></code></pre><br><p>如果你是windows用户，那么公钥生成的目录是C:\Users\用户名.ssh下，里面有两个文件 id_rsa 和 id_rsa.pub ，其中id_rsa.pub中的内容就是我们需要的公钥。如果你是Linux或者mac用户，那么在用户主目录下也会有一个.ssh目录，里面放着的是私钥和公钥。假设我们现在要把github作为远程推送服务器地址，那么，我们首先把公钥放在github的settings-&gt;SSH keys列表中（点击新建一个ssh key，title随意，把公钥的全部内容复制进行保存即可）。</p><br><p>八、现在我们可以给StudyGit项目在github上添加一个远程仓库了。在github上add new repository，名字我在这里也用StudyGit了（起其他名字也可以），建好后显示如下：<br><br><img src="http://www.yyztech.com/usr/uploads/2015/11/867745562.png" alt="屏幕快照 2015-11-17 下午11.00.11.png"><br><br>可以看到有一个ssh地址是git@github.com:onlyanyz/StudyGit.git，这个就是我们的远程git仓库地址了，一会我们就会把文件推送到这里。<br><br>接下来，我们需要把本地git仓库关联到远程git仓库，操作如下：进入本地StudyGit根目录，执行如下命令：</p><br><pre><code>git remote add origin git@github.com:onlyanyz/StudyGit.git<br></code></pre><br><p>这个命令的意思是，我给远程仓库（就是git@github.com:onlyanyz/StudyGit.git）起了个别名，叫origin（其实叫别的名字也可以，你只要知道这是别名就行，以后就用别名来操作远程库）。操作后，我们可以使用“git remote”命令来查看当前本地仓库关联了哪些远程仓库(它会列出每个远程库的简短名字。如果您之前会使用git clone命令的话，在克隆完某个项目后,至少可以看到一个名为 origin 的远程库,Git默认使用这个名字来标识你所克隆的原始仓库)。</p><br><p>九、关联了远程仓库之后，我们就可以推送了。将本地仓库push到远程仓库的命令如下：</p><br><pre><code>git push origin master<br></code></pre><br><p>命令解释如下：<br><br>git push的语法为：git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br><br>该语法表示把本地分支名push到远程主机名的远程分支。我们可以看到刚才执行的语句并没有远程分支名（被省略了），如果省略远程分支名，则表示将本地分支推送到与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。所以刚才执行的语句的意思是，把本地的master分支推送到远程主机的master分支。<br><br>关于git push命令以后还需要注意的地方：<br><br>a.如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。例如：</p><br><pre><code>$ git push origin :master<br></code></pre><br><p>该命令等同于如下指令：<code>$ git push origin –delete master</code>，表示删除远程主机的master分支。<br><br>b.git push 有时候本地分支和远程分支名都可以省略，有时候连主机名也可以省略，这个现在就不细说了。<br><br>c.如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push:</p><br><pre><code>$ git push -u origin master<br></code></pre><br><p>好了，现在我们已经把StudyGit目录中的内容都推送到远程了，现在运行git status看下：</p><br><pre><code>~/Coding/Practice/StudyGit$ git status<br>On branch master<br>nothing to commit, working directory clean<br></code></pre><br><p>工作目录还是干净的，接下来您就可以继续在本地进行创建文件-&gt;提交到暂存区-&gt;提交到本地仓库-&gt;push到远程仓库的过程啦！</p>

<p><br><small>来源：<a href="http://www.yanyaozhen.com/archives/38/" title="闫耀珍" target="_blank" rel="external">闫耀珍</a></small></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;post-content&quot; itemprop=&quot;articleBody&quot;&gt;&lt;br&gt;            &lt;p&gt;git是非常强大的版本管理工具。接下来的时间里，我就和大家絮叨絮叨git的入门：如何在本地创建一个git仓库，并把自己的本地代码同步到远程。此教程是在mac上操作的，如果您的系统是Linux，那么操作方法相同；如果您的系统是windows，那么，只需要把git的bash窗口调出来，以后的过程也都与Linux相同。&lt;br&gt;&lt;br&gt;一、首先，您需要安装git，此步就忽略了，自行安装即可。&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;二、假设你目前还没有创建一个工作目录,那么，先创建一个目录吧，就叫StudyGit。&lt;/p&gt;&lt;br&gt;&lt;p&gt;三、现在的StudyGit目录还只是一个本地目录，和git没有任何关联,那么，我们怎么样才能把这个目录和git关联起来呢？只需要进入StudyGit目录，运行如下命令：&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="其他技能" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="技能" scheme="http://yoursite.com/tags/%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>maven详解</title>
    <link href="http://yoursite.com/2017/06/06/maven%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/06/06/maven详解/</id>
    <published>2017-06-06T11:47:37.923Z</published>
    <updated>2017-06-06T12:13:42.395Z</updated>
    
    <content type="html"><![CDATA[<div id="cnblogs_post_body"><p><strong>一.前言</strong></p><br><p><strong>&nbsp; &nbsp;&nbsp;</strong>以前做过的项目中，没有真正的使用过Maven，只知道其名声很大，其作用是用来管理jar 包的。最近一段时间在项目过程中使用Maven，用Maven构建的web项目，其项目结构只停留在了解阶段，没有深入的使用与理解，刚好最近看了一篇关于Maven的详解；就开始深入学习一下Maven的具体应用。</p><br><p><strong>二.Maven的作用</strong></p><br><ol><br><li>在开发中，为了保证编译通过，我们会到处去寻找jar包，当编译通过了，运行的时候，却发现”ClassNotFoundException”，我们想到的是，难道还差jar包？</li><br><li>每个Java项目的目录结构都没有一个统一的标准，配置文件到处都是，单元测试代码到底应该放在那里也没有一个权威的规范。</li><br><li>因此，我们就要用到Maven（使用Ant也可以，不过编写Ant的xml脚本比较麻烦）—-一个<strong>项目管理工具</strong>。</li><br><li>Maven主要做了两件事：</li><br></ol><br><ul><br><li>统一开发规范与工具</li><br><li>统一管理jar包</li><br></ul><br><p>&nbsp; &nbsp;&nbsp;下面我们来对比一下，首先建立一个普通的Java工程，是这样的：</p><br><p><img src="http://images2015.cnblogs.com/blog/801753/201603/801753-20160323142502401-108348091.png" alt=""></p><br><p>&nbsp; &nbsp;这个我们都很熟悉，src下建包写代码，那么配置文件放在哪里？单元测试代码放在哪里？没有一个统一标准，更多时候都是开发者的自由发挥，每个人有自己的风格，这并不十分适合团队协作。接下来，看一下使用maven构建一个普通Java项目之后的目录结构：</p><br><p><img src="http://images2015.cnblogs.com/blog/801753/201603/801753-20160323142310370-1439246574.png" alt=""></p><br><p>看到使用Maven构建的普通Java项目，对源代码、单元测试代码、资源乃至后续需要的文件都有专门的目录规划。</p><br><p>上面的最后有一个pom.xml，这是Maven的核心配置文件，pom称为Project Object Model（<strong>项目对象模型</strong>），它用于描述整个Maven项目，所以也称为Maven描述文件。</p><br><p>当然事情不会这么简单，接下来，继续进入Maven的世界吧。</p><br><p><strong>pom.xml</strong></p><br><p>打开pom.xml，最基础的是这样的：</p><br><div class="cnblogs_Highlighter sh-gutter"><br><div><div id="highlighter_100065" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">&lt;project xmlns=</code><code class="csharp string">“<a href="http://maven.apache.org/POM/4.0.0" target="_blank" rel="external">http://maven.apache.org/POM/4.0.0</a>“</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">xmlns:xsi=</code><code class="csharp string">“<a href="http://www.w3.org/2001/XMLSchema-instance" target="_blank" rel="external">http://www.w3.org/2001/XMLSchema-instance</a>“</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">xsi:schemaLocation=</code><code class="csharp string">“<a href="http://maven.apache.org/POM/4.0.0" target="_blank" rel="external">http://maven.apache.org/POM/4.0.0</a> <a href="http://maven.apache.org/xsd/maven-4.0.0.xsd" target="_blank" rel="external">http://maven.apache.org/xsd/maven-4.0.0.xsd</a>“</code><code class="csharp plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">&lt;groupId&gt;com.xrq.withmaven&lt;/groupId&gt;</code></div><div class="line number7 index6 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">&lt;artifactId&gt;withmaven&lt;/artifactId&gt;</code></div><div class="line number8 index7 alt1"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</code></div><div class="line number9 index8 alt2"><code class="csharp spaces">&nbsp;&nbsp;</code><code class="csharp plain">&lt;build/&gt;</code></div><div class="line number10 index9 alt1"><code class="csharp plain">&lt;/project&gt;</code></div></div></td></tr></tbody></table></div></div><br></div><br><p>因为这个配置文件是Maven的核心，因此有必要详细解读一下pom.xml，来先看一下上面的几个：</p><br><p><strong>1、modelVersion</strong></p><br><p>　　指定了当前Maven模型的版本号，对于Maven2和Maven3来说，它只能是4.0.0</p><br><p><strong>2、groupId</strong></p><br><p>　　顾名思义，这个应该是公司名或是组织名。一般来说groupId是由三个部分组成，每个部分之间以”.”分隔，第一部分是项目用途，比如用于商业的就是”com”，用于非营利性组织的就　　是”org”；第二部分是公司名，比如”tengxun”、”baidu”、”alibaba”；第三部分是你的项目名</p><br><p><strong>3、artifactId</strong></p><br><p>　　可以认为是Maven构建的项目名，比如你的项目中有子项目，就可以使用”项目名-子项目名”的命名方式</p><br><p><strong>4、version</strong></p><br><p>　　版本号，SNAPSHOT意为快照，说明该项目还在开发中，是不稳定的版本。在Maven中很重要的一点是，<span style="color: #ff0000;"><strong>groupId、artifactId、version三个元素生成了一个Maven项目的基本坐标</strong></span>，这非常重要，我在使用和研究Maven的时候多次感受到了这点。</p><br><p>在上面的这些元素之外，还有一些元素，同样罗列一下：</p><br><p><strong>1、packing</strong></p><br><p>　　项目打包的类型，可以使jar、war、rar、ear、pom，默认是jar</p><br><p><strong>2、dependencies和dependency</strong></p><br><p>　　前者包含后者。前面说了，Maven的一个重要作用就是统一管理jar包，为了一个项目可以build或运行，项目中不可避免的，会依赖很多其他的jar包，在Maven中，这些依赖就被称为dependency。</p><br><p>　　说到这里，就有一个<span style="color: #ff0000;"><strong>本地仓库</strong></span>和<span style="color: #ff0000;"><strong>远程仓库</strong></span>的概念了。官方下载的本地仓库的配置在”%MAVEN_HOME%\conf\settings.xml”里面，找一下”localRepository”就可以了；MyEclipse默认的本地仓库的地址在”{user.home}/.m2/repository”路径下，同样找一下”localRepository”就可以找到MyEclipse默认的本地仓库了。</p><br><p>　　本地仓库和远程仓库是这样的，<span style="color: #ff0000;"><strong>Maven工程首先会从本地仓库中获取jar包，当无法获取指定jar包时，本地仓库会从远程仓库（中央仓库）中下载jar包，并放入本地仓库以备将来使用</strong></span>。</p><br><p>　　举个例子，比方说我的项目中用到了MyBatis，那么可以这么配置：</p><br><div class="cnblogs_Highlighter sh-gutter"><br><div><div id="highlighter_349928" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">&lt;dependencies&gt;</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;dependency&gt;</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;artifactId&gt;mybatis&lt;/artifactId&gt;</code></div><div class="line number5 index4 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;version&gt;3.2.5&lt;/version&gt;</code></div><div class="line number6 index5 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;/dependency&gt;</code></div><div class="line number7 index6 alt2"><code class="csharp plain">&lt;/dependencies&gt;</code></div></div></td></tr></tbody></table></div></div><br></div><br><p>&nbsp; &nbsp; 之前有说过groupId、artifactId、version唯一标识一个Maven项目，有了这三个元素，我们就可以去远程仓库下载MyBatis3.2.5.jar到本地仓库了。回想我们之前的做法，如果要MyBatis的jar包，发现没有，然后去网上下载一个，需要另外的jar包，然后去网上下载一个，但是有了Maven，就方便多了，只需要配置jar包对应的dependency依赖，Maven会自动帮助我们去远程仓库中下载jar包到本地仓库中。</p><br><p><strong>3、properties</strong></p><br><p>　　properties是用来定义一些配置属性的，例如project.build.sourceEncoding（项目构建源码编码方式），可以设置为UTF-8，防止中文乱码，也可定义相关构建版本号，便于日后统一升级。</p><br><p><strong>4、build</strong></p><br><p>　　build表示与构建相关的配置，比如build下有finalName，表示的就是最终构建之后的名称。</p><br><p>接着解释一下Maven的目录结构：</p><br><ul><br><li>main目录下是项目的主要代码，test目录下存放测试相关的代码</li><br><li>编译输出后的代码会放在target目录下</li><br><li>src/main/java下存放Java代码，src/main/resources下存放配置文件</li><br><li>这里没有webapp，Web项目会有webapp目录，webapp下存放Web应用相关代码</li><br><li>pom.xml是Maven项目的配置文件</li><br></ul><br><p><strong>三.Maven环境配置</strong></p><br><p>常用的开发工具Idea、MyEclipse里面都已经集成了Maven了，不过最好是从官网下一个配置到自己电脑里，开发工具里的可能有少许的Bug。</p><br><p>首先去Maven官网，下载Maven的包，地址为<a href="http://maven.apache.org/download.cgi，找到下面的部分，点击就可以下载了：" target="_blank" rel="external">http://maven.apache.org/download.cgi，找到下面的部分，点击就可以下载了：</a></p><br><p><img src="http://images2015.cnblogs.com/blog/801753/201603/801753-20160323100101026-1407305763.png" alt="" width="906" height="144"></p><br><p>下载完解压，然后配置一下环境变量，和JDK的环境变量配置类似：</p><br><p><img src="http://images2015.cnblogs.com/blog/801753/201603/801753-20160323100124604-2030468802.png" alt="" width="351" height="195"></p><br><p><img src="http://images2015.cnblogs.com/blog/801753/201603/801753-20160323100137573-1877333407.png" alt="" width="352" height="194"></p><br><p>这样配置完就可以了，验证一下，windows+r打开命令窗口，输入”mvn –version”，如果有下面的内容这表示Maven配置OK：</p><br><p><img src="http://images2015.cnblogs.com/blog/801753/201603/801753-20160323100259839-1317690761.png" alt="" width="573" height="120"></p><br><p>&nbsp;</p><br><p><strong>Maven入门使用常见问题</strong></p><br><p><strong>1、我从SVN上下载了一个以Maven构建的工程，下载完毕没有jar包怎么办？</strong></p><br><p>从资源库上下载下来的Maven工程，是没有jar包的，此时可以这么做：</p><br><p>（1）删除Maven工程，但是删除的时候不要删除本地工程里面的Maven工程，只删除MyEclipse中的Maven工程</p><br><p>（2）右键Import-&gt;Maven4MyEclipse-&gt;Existing Maven Projects，导入你的Maven工程，此时MyEclipse在构建工程的时候，假如你的本地仓库中没有dependcy中的jar包，便会去远程仓库下载jar包到本地仓库中。你的工程导入完毕之后，Library应该是这样的：</p><br><p><img src="http://images2015.cnblogs.com/blog/801753/201603/801753-20160324212234058-1064175606.png" alt=""></p><br><p><strong>2、重新下载Maven工程所依赖的jar包、导入jar包都需要触发Maven工程的build workspace，那么如何才能触发Maven工程的build workspace？</strong></p><br><p>找到一个pom.xml，随便修改一下，加一个空格、减一个空格什么的，ctrl+s保存一下，便会触发Maven工程的build workspace了</p><br><p><strong>3、本地仓库的目录结构是什么样子的？</strong></p><br><p>groupId、artifactId、version确定一个唯一的Maven，比方说我有一个mybatis的dependcy:</p><br><div class="cnblogs_Highlighter sh-gutter"><br><div><div id="highlighter_933448" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">&lt;dependency&gt;</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;artifactId&gt;mybatis&lt;/artifactId&gt; </code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">&lt;version&gt;3.2.5&lt;/version&gt;</code></div><div class="line number5 index4 alt2"><code class="csharp plain">&lt;/dependency&gt;</code></div></div></td></tr></tbody></table></div></div><br></div><br><p>那么mybatis的jar包应该在%Maven仓库地址%\org\mybatis\mybatis\3.2.5\这一路径下，看到了吧，先groupId，再mybatis，最后version，每个名字都是一个文件夹的名字</p><br><p><strong>4、有些jar包在dependcy里面有配置，Import了Maven工程，下载完工程所依赖的jar包之后，发现本地仓库里面却没有，怎么办？</strong></p><br><p>可能是原先下载jar包的时候出了什么问题，从artifactId目录开始删除以下的所有文件/文件夹，然后触发一次Maven工程的build workspace就可以了</p><br><p><strong>5、本地仓库中确定已经有jar包了，工程里面却报错，说找不到jar包，该怎么办？</strong></p><br><p>应该有很多解决办法，目前解决的一种办法是，MyEclipse-&gt;Window-&gt;Preferences-&gt;搜索Maven-&gt;User Settings,Update Settings和Reindex点一下就好了。另外，可以尝试一下把本地Maven仓库内的jar包删除一下，然后重新build workspace，可能也可以。</p><br><p>　　</p></div>

<p><small>来源：<a href="http://www.cnblogs.com/hongwz/p/5456578.html" title="独具匠心" target="_blank" rel="external">独具匠心</a></small></p>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;cnblogs_post_body&quot;&gt;&lt;p&gt;&lt;strong&gt;一.前言&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/strong&gt;以前做过的项目中，没有真正的使用过Maven，只知道其名声很大，其作用是用来管理j
    
    </summary>
    
      <category term="其他技能" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="技能" scheme="http://yoursite.com/tags/%E6%8A%80%E8%83%BD/"/>
    
      <category term="java web" scheme="http://yoursite.com/tags/java-web/"/>
    
  </entry>
  
</feed>
